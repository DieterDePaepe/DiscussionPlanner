package com.github.dieterdepaepe.discussionplanner.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import com.github.dieterdepaepe.discussionplanner.domain.SubjectAssignment;
import com.github.dieterdepaepe.discussionplanner.domain.Participant;
import com.github.dieterdepaepe.discussionplanner.domain.Subject;
import com.github.dieterdepaepe.discussionplanner.domain.Location;
import com.github.dieterdepaepe.discussionplanner.domain.ParticipantAssignment;
import com.github.dieterdepaepe.discussionplanner.domain.GroupTargetSize;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "subjectsArentDiscussedMultipleTimes"
    when
        SubjectAssignment($id : id, subject != null, $subject : subject)
        SubjectAssignment(id > $id, subject == $subject)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "participantGetPreferredSubject"
    when
        ParticipantAssignment($participant : participant, $r : round, $l : location)
        SubjectAssignment(location == $l, round == $r, $subject : subject)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, $participant.satisfactionOf($subject));
end

rule "groupSizesAreAboutTheSame"
    when
        SubjectAssignment($round : round, $location : location)
        $groupSize : Number() from accumulate(
            $p : ParticipantAssignment(location == $location, round == $round),
            count($p)
        )
        GroupTargetSize($targetGroupSize : number)

    then
        int penalty = Math.abs($groupSize.intValue() - $targetGroupSize);
        scoreHolder.addSoftConstraintMatch(kcontext, -penalty * penalty);
end
